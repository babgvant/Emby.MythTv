//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace babgvant.Emby.MythTv.MythTvCapture {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CaptureCard", Namespace="http://mythtv.org")]
    [System.SerializableAttribute()]
    public partial class CaptureCard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VideoDeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AudioDeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VBIDeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint AudioRateLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DVBSWFilterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DVBSatTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DVBWaitForSeqStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SkipBTAudioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DVBOnDemandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DVBDiSEqCTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint FirewireSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirewireModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint FirewireConnectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint SignalTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ChannelTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DVBTuningDelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ContrastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint BrightnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ColourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint HueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DiSEqCIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DVBEITScanField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((this.CardIdField.Equals(value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string VideoDevice {
            get {
                return this.VideoDeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.VideoDeviceField, value) != true)) {
                    this.VideoDeviceField = value;
                    this.RaisePropertyChanged("VideoDevice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string AudioDevice {
            get {
                return this.AudioDeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.AudioDeviceField, value) != true)) {
                    this.AudioDeviceField = value;
                    this.RaisePropertyChanged("AudioDevice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string VBIDevice {
            get {
                return this.VBIDeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.VBIDeviceField, value) != true)) {
                    this.VBIDeviceField = value;
                    this.RaisePropertyChanged("VBIDevice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string CardType {
            get {
                return this.CardTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CardTypeField, value) != true)) {
                    this.CardTypeField = value;
                    this.RaisePropertyChanged("CardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public uint AudioRateLimit {
            get {
                return this.AudioRateLimitField;
            }
            set {
                if ((this.AudioRateLimitField.Equals(value) != true)) {
                    this.AudioRateLimitField = value;
                    this.RaisePropertyChanged("AudioRateLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public uint DVBSWFilter {
            get {
                return this.DVBSWFilterField;
            }
            set {
                if ((this.DVBSWFilterField.Equals(value) != true)) {
                    this.DVBSWFilterField = value;
                    this.RaisePropertyChanged("DVBSWFilter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public uint DVBSatType {
            get {
                return this.DVBSatTypeField;
            }
            set {
                if ((this.DVBSatTypeField.Equals(value) != true)) {
                    this.DVBSatTypeField = value;
                    this.RaisePropertyChanged("DVBSatType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public bool DVBWaitForSeqStart {
            get {
                return this.DVBWaitForSeqStartField;
            }
            set {
                if ((this.DVBWaitForSeqStartField.Equals(value) != true)) {
                    this.DVBWaitForSeqStartField = value;
                    this.RaisePropertyChanged("DVBWaitForSeqStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public bool SkipBTAudio {
            get {
                return this.SkipBTAudioField;
            }
            set {
                if ((this.SkipBTAudioField.Equals(value) != true)) {
                    this.SkipBTAudioField = value;
                    this.RaisePropertyChanged("SkipBTAudio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public bool DVBOnDemand {
            get {
                return this.DVBOnDemandField;
            }
            set {
                if ((this.DVBOnDemandField.Equals(value) != true)) {
                    this.DVBOnDemandField = value;
                    this.RaisePropertyChanged("DVBOnDemand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public uint DVBDiSEqCType {
            get {
                return this.DVBDiSEqCTypeField;
            }
            set {
                if ((this.DVBDiSEqCTypeField.Equals(value) != true)) {
                    this.DVBDiSEqCTypeField = value;
                    this.RaisePropertyChanged("DVBDiSEqCType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public uint FirewireSpeed {
            get {
                return this.FirewireSpeedField;
            }
            set {
                if ((this.FirewireSpeedField.Equals(value) != true)) {
                    this.FirewireSpeedField = value;
                    this.RaisePropertyChanged("FirewireSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=14)]
        public string FirewireModel {
            get {
                return this.FirewireModelField;
            }
            set {
                if ((object.ReferenceEquals(this.FirewireModelField, value) != true)) {
                    this.FirewireModelField = value;
                    this.RaisePropertyChanged("FirewireModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public uint FirewireConnection {
            get {
                return this.FirewireConnectionField;
            }
            set {
                if ((this.FirewireConnectionField.Equals(value) != true)) {
                    this.FirewireConnectionField = value;
                    this.RaisePropertyChanged("FirewireConnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public uint SignalTimeout {
            get {
                return this.SignalTimeoutField;
            }
            set {
                if ((this.SignalTimeoutField.Equals(value) != true)) {
                    this.SignalTimeoutField = value;
                    this.RaisePropertyChanged("SignalTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=17)]
        public uint ChannelTimeout {
            get {
                return this.ChannelTimeoutField;
            }
            set {
                if ((this.ChannelTimeoutField.Equals(value) != true)) {
                    this.ChannelTimeoutField = value;
                    this.RaisePropertyChanged("ChannelTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=18)]
        public uint DVBTuningDelay {
            get {
                return this.DVBTuningDelayField;
            }
            set {
                if ((this.DVBTuningDelayField.Equals(value) != true)) {
                    this.DVBTuningDelayField = value;
                    this.RaisePropertyChanged("DVBTuningDelay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=19)]
        public uint Contrast {
            get {
                return this.ContrastField;
            }
            set {
                if ((this.ContrastField.Equals(value) != true)) {
                    this.ContrastField = value;
                    this.RaisePropertyChanged("Contrast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=20)]
        public uint Brightness {
            get {
                return this.BrightnessField;
            }
            set {
                if ((this.BrightnessField.Equals(value) != true)) {
                    this.BrightnessField = value;
                    this.RaisePropertyChanged("Brightness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=21)]
        public uint Colour {
            get {
                return this.ColourField;
            }
            set {
                if ((this.ColourField.Equals(value) != true)) {
                    this.ColourField = value;
                    this.RaisePropertyChanged("Colour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=22)]
        public uint Hue {
            get {
                return this.HueField;
            }
            set {
                if ((this.HueField.Equals(value) != true)) {
                    this.HueField = value;
                    this.RaisePropertyChanged("Hue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=23)]
        public uint DiSEqCId {
            get {
                return this.DiSEqCIdField;
            }
            set {
                if ((this.DiSEqCIdField.Equals(value) != true)) {
                    this.DiSEqCIdField = value;
                    this.RaisePropertyChanged("DiSEqCId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=24)]
        public bool DVBEITScan {
            get {
                return this.DVBEITScanField;
            }
            set {
                if ((this.DVBEITScanField.Equals(value) != true)) {
                    this.DVBEITScanField = value;
                    this.RaisePropertyChanged("DVBEITScan");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CaptureCardList", Namespace="http://mythtv.org")]
    [System.SerializableAttribute()]
    public partial class CaptureCardList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private babgvant.Emby.MythTv.MythTvCapture.CaptureCard[] CaptureCardsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public babgvant.Emby.MythTv.MythTvCapture.CaptureCard[] CaptureCards {
            get {
                return this.CaptureCardsField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptureCardsField, value) != true)) {
                    this.CaptureCardsField = value;
                    this.RaisePropertyChanged("CaptureCards");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://mythtv.org", ConfigurationName="MythTvCapture.Capture")]
    public interface Capture {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/AddCaptureCard", ReplyAction="http://mythtv.org/Capture/AddCaptureCardResponse")]
        System.Nullable<int> AddCaptureCard(
                    string VideoDevice, 
                    string AudioDevice, 
                    string VBIDevice, 
                    string CardType, 
                    System.Nullable<uint> AudioRateLimit, 
                    string HostName, 
                    System.Nullable<uint> DVBSWFilter, 
                    System.Nullable<uint> DVBSatType, 
                    System.Nullable<bool> DVBWaitForSeqStart, 
                    System.Nullable<bool> SkipBTAudio, 
                    System.Nullable<bool> DVBOnDemand, 
                    System.Nullable<uint> DVBDiSEqCType, 
                    System.Nullable<uint> FirewireSpeed, 
                    string FirewireModel, 
                    System.Nullable<uint> FirewireConnection, 
                    System.Nullable<uint> SignalTimeout, 
                    System.Nullable<uint> ChannelTimeout, 
                    System.Nullable<uint> DVBTuningDelay, 
                    System.Nullable<uint> Contrast, 
                    System.Nullable<uint> Brightness, 
                    System.Nullable<uint> Colour, 
                    System.Nullable<uint> Hue, 
                    System.Nullable<uint> DiSEqCId, 
                    System.Nullable<bool> DVBEITScan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/AddCaptureCard", ReplyAction="http://mythtv.org/Capture/AddCaptureCardResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> AddCaptureCardAsync(
                    string VideoDevice, 
                    string AudioDevice, 
                    string VBIDevice, 
                    string CardType, 
                    System.Nullable<uint> AudioRateLimit, 
                    string HostName, 
                    System.Nullable<uint> DVBSWFilter, 
                    System.Nullable<uint> DVBSatType, 
                    System.Nullable<bool> DVBWaitForSeqStart, 
                    System.Nullable<bool> SkipBTAudio, 
                    System.Nullable<bool> DVBOnDemand, 
                    System.Nullable<uint> DVBDiSEqCType, 
                    System.Nullable<uint> FirewireSpeed, 
                    string FirewireModel, 
                    System.Nullable<uint> FirewireConnection, 
                    System.Nullable<uint> SignalTimeout, 
                    System.Nullable<uint> ChannelTimeout, 
                    System.Nullable<uint> DVBTuningDelay, 
                    System.Nullable<uint> Contrast, 
                    System.Nullable<uint> Brightness, 
                    System.Nullable<uint> Colour, 
                    System.Nullable<uint> Hue, 
                    System.Nullable<uint> DiSEqCId, 
                    System.Nullable<bool> DVBEITScan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/AddCardInput", ReplyAction="http://mythtv.org/Capture/AddCardInputResponse")]
        System.Nullable<int> AddCardInput(System.Nullable<uint> CardId, System.Nullable<uint> SourceId, string InputName, string ExternalCommand, string ChangerDevice, string ChangerModel, string HostName, string TuneChan, string StartChan, string DisplayName, System.Nullable<bool> DishnetEIT, System.Nullable<uint> RecPriority, System.Nullable<uint> Quicktune, System.Nullable<uint> SchedOrder, System.Nullable<uint> LiveTVOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/AddCardInput", ReplyAction="http://mythtv.org/Capture/AddCardInputResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> AddCardInputAsync(System.Nullable<uint> CardId, System.Nullable<uint> SourceId, string InputName, string ExternalCommand, string ChangerDevice, string ChangerModel, string HostName, string TuneChan, string StartChan, string DisplayName, System.Nullable<bool> DishnetEIT, System.Nullable<uint> RecPriority, System.Nullable<uint> Quicktune, System.Nullable<uint> SchedOrder, System.Nullable<uint> LiveTVOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/GetCaptureCard", ReplyAction="http://mythtv.org/Capture/GetCaptureCardResponse")]
        babgvant.Emby.MythTv.MythTvCapture.CaptureCard GetCaptureCard(System.Nullable<int> CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/GetCaptureCard", ReplyAction="http://mythtv.org/Capture/GetCaptureCardResponse")]
        System.Threading.Tasks.Task<babgvant.Emby.MythTv.MythTvCapture.CaptureCard> GetCaptureCardAsync(System.Nullable<int> CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/GetCaptureCardList", ReplyAction="http://mythtv.org/Capture/GetCaptureCardListResponse")]
        babgvant.Emby.MythTv.MythTvCapture.CaptureCardList GetCaptureCardList(string HostName, string CardType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/GetCaptureCardList", ReplyAction="http://mythtv.org/Capture/GetCaptureCardListResponse")]
        System.Threading.Tasks.Task<babgvant.Emby.MythTv.MythTvCapture.CaptureCardList> GetCaptureCardListAsync(string HostName, string CardType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/RemoveCaptureCard", ReplyAction="http://mythtv.org/Capture/RemoveCaptureCardResponse")]
        System.Nullable<bool> RemoveCaptureCard(System.Nullable<int> CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/RemoveCaptureCard", ReplyAction="http://mythtv.org/Capture/RemoveCaptureCardResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> RemoveCaptureCardAsync(System.Nullable<int> CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/RemoveCardInput", ReplyAction="http://mythtv.org/Capture/RemoveCardInputResponse")]
        System.Nullable<bool> RemoveCardInput(System.Nullable<int> CardInputId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/RemoveCardInput", ReplyAction="http://mythtv.org/Capture/RemoveCardInputResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> RemoveCardInputAsync(System.Nullable<int> CardInputId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/UpdateCaptureCard", ReplyAction="http://mythtv.org/Capture/UpdateCaptureCardResponse")]
        System.Nullable<bool> UpdateCaptureCard(System.Nullable<int> CardId, string Setting, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/UpdateCaptureCard", ReplyAction="http://mythtv.org/Capture/UpdateCaptureCardResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> UpdateCaptureCardAsync(System.Nullable<int> CardId, string Setting, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/UpdateCardInput", ReplyAction="http://mythtv.org/Capture/UpdateCardInputResponse")]
        System.Nullable<bool> UpdateCardInput(System.Nullable<int> CardInputId, string Setting, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mythtv.org/Capture/UpdateCardInput", ReplyAction="http://mythtv.org/Capture/UpdateCardInputResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> UpdateCardInputAsync(System.Nullable<int> CardInputId, string Setting, string Value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CaptureChannel : babgvant.Emby.MythTv.MythTvCapture.Capture, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CaptureClient : System.ServiceModel.ClientBase<babgvant.Emby.MythTv.MythTvCapture.Capture>, babgvant.Emby.MythTv.MythTvCapture.Capture {
        
        public CaptureClient() {
        }
        
        public CaptureClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CaptureClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CaptureClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CaptureClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Nullable<int> AddCaptureCard(
                    string VideoDevice, 
                    string AudioDevice, 
                    string VBIDevice, 
                    string CardType, 
                    System.Nullable<uint> AudioRateLimit, 
                    string HostName, 
                    System.Nullable<uint> DVBSWFilter, 
                    System.Nullable<uint> DVBSatType, 
                    System.Nullable<bool> DVBWaitForSeqStart, 
                    System.Nullable<bool> SkipBTAudio, 
                    System.Nullable<bool> DVBOnDemand, 
                    System.Nullable<uint> DVBDiSEqCType, 
                    System.Nullable<uint> FirewireSpeed, 
                    string FirewireModel, 
                    System.Nullable<uint> FirewireConnection, 
                    System.Nullable<uint> SignalTimeout, 
                    System.Nullable<uint> ChannelTimeout, 
                    System.Nullable<uint> DVBTuningDelay, 
                    System.Nullable<uint> Contrast, 
                    System.Nullable<uint> Brightness, 
                    System.Nullable<uint> Colour, 
                    System.Nullable<uint> Hue, 
                    System.Nullable<uint> DiSEqCId, 
                    System.Nullable<bool> DVBEITScan) {
            return base.Channel.AddCaptureCard(VideoDevice, AudioDevice, VBIDevice, CardType, AudioRateLimit, HostName, DVBSWFilter, DVBSatType, DVBWaitForSeqStart, SkipBTAudio, DVBOnDemand, DVBDiSEqCType, FirewireSpeed, FirewireModel, FirewireConnection, SignalTimeout, ChannelTimeout, DVBTuningDelay, Contrast, Brightness, Colour, Hue, DiSEqCId, DVBEITScan);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> AddCaptureCardAsync(
                    string VideoDevice, 
                    string AudioDevice, 
                    string VBIDevice, 
                    string CardType, 
                    System.Nullable<uint> AudioRateLimit, 
                    string HostName, 
                    System.Nullable<uint> DVBSWFilter, 
                    System.Nullable<uint> DVBSatType, 
                    System.Nullable<bool> DVBWaitForSeqStart, 
                    System.Nullable<bool> SkipBTAudio, 
                    System.Nullable<bool> DVBOnDemand, 
                    System.Nullable<uint> DVBDiSEqCType, 
                    System.Nullable<uint> FirewireSpeed, 
                    string FirewireModel, 
                    System.Nullable<uint> FirewireConnection, 
                    System.Nullable<uint> SignalTimeout, 
                    System.Nullable<uint> ChannelTimeout, 
                    System.Nullable<uint> DVBTuningDelay, 
                    System.Nullable<uint> Contrast, 
                    System.Nullable<uint> Brightness, 
                    System.Nullable<uint> Colour, 
                    System.Nullable<uint> Hue, 
                    System.Nullable<uint> DiSEqCId, 
                    System.Nullable<bool> DVBEITScan) {
            return base.Channel.AddCaptureCardAsync(VideoDevice, AudioDevice, VBIDevice, CardType, AudioRateLimit, HostName, DVBSWFilter, DVBSatType, DVBWaitForSeqStart, SkipBTAudio, DVBOnDemand, DVBDiSEqCType, FirewireSpeed, FirewireModel, FirewireConnection, SignalTimeout, ChannelTimeout, DVBTuningDelay, Contrast, Brightness, Colour, Hue, DiSEqCId, DVBEITScan);
        }
        
        public System.Nullable<int> AddCardInput(System.Nullable<uint> CardId, System.Nullable<uint> SourceId, string InputName, string ExternalCommand, string ChangerDevice, string ChangerModel, string HostName, string TuneChan, string StartChan, string DisplayName, System.Nullable<bool> DishnetEIT, System.Nullable<uint> RecPriority, System.Nullable<uint> Quicktune, System.Nullable<uint> SchedOrder, System.Nullable<uint> LiveTVOrder) {
            return base.Channel.AddCardInput(CardId, SourceId, InputName, ExternalCommand, ChangerDevice, ChangerModel, HostName, TuneChan, StartChan, DisplayName, DishnetEIT, RecPriority, Quicktune, SchedOrder, LiveTVOrder);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> AddCardInputAsync(System.Nullable<uint> CardId, System.Nullable<uint> SourceId, string InputName, string ExternalCommand, string ChangerDevice, string ChangerModel, string HostName, string TuneChan, string StartChan, string DisplayName, System.Nullable<bool> DishnetEIT, System.Nullable<uint> RecPriority, System.Nullable<uint> Quicktune, System.Nullable<uint> SchedOrder, System.Nullable<uint> LiveTVOrder) {
            return base.Channel.AddCardInputAsync(CardId, SourceId, InputName, ExternalCommand, ChangerDevice, ChangerModel, HostName, TuneChan, StartChan, DisplayName, DishnetEIT, RecPriority, Quicktune, SchedOrder, LiveTVOrder);
        }
        
        public babgvant.Emby.MythTv.MythTvCapture.CaptureCard GetCaptureCard(System.Nullable<int> CardId) {
            return base.Channel.GetCaptureCard(CardId);
        }
        
        public System.Threading.Tasks.Task<babgvant.Emby.MythTv.MythTvCapture.CaptureCard> GetCaptureCardAsync(System.Nullable<int> CardId) {
            return base.Channel.GetCaptureCardAsync(CardId);
        }
        
        public babgvant.Emby.MythTv.MythTvCapture.CaptureCardList GetCaptureCardList(string HostName, string CardType) {
            return base.Channel.GetCaptureCardList(HostName, CardType);
        }
        
        public System.Threading.Tasks.Task<babgvant.Emby.MythTv.MythTvCapture.CaptureCardList> GetCaptureCardListAsync(string HostName, string CardType) {
            return base.Channel.GetCaptureCardListAsync(HostName, CardType);
        }
        
        public System.Nullable<bool> RemoveCaptureCard(System.Nullable<int> CardId) {
            return base.Channel.RemoveCaptureCard(CardId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> RemoveCaptureCardAsync(System.Nullable<int> CardId) {
            return base.Channel.RemoveCaptureCardAsync(CardId);
        }
        
        public System.Nullable<bool> RemoveCardInput(System.Nullable<int> CardInputId) {
            return base.Channel.RemoveCardInput(CardInputId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> RemoveCardInputAsync(System.Nullable<int> CardInputId) {
            return base.Channel.RemoveCardInputAsync(CardInputId);
        }
        
        public System.Nullable<bool> UpdateCaptureCard(System.Nullable<int> CardId, string Setting, string Value) {
            return base.Channel.UpdateCaptureCard(CardId, Setting, Value);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> UpdateCaptureCardAsync(System.Nullable<int> CardId, string Setting, string Value) {
            return base.Channel.UpdateCaptureCardAsync(CardId, Setting, Value);
        }
        
        public System.Nullable<bool> UpdateCardInput(System.Nullable<int> CardInputId, string Setting, string Value) {
            return base.Channel.UpdateCardInput(CardInputId, Setting, Value);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> UpdateCardInputAsync(System.Nullable<int> CardInputId, string Setting, string Value) {
            return base.Channel.UpdateCardInputAsync(CardInputId, Setting, Value);
        }
    }
}
